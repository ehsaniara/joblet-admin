#!/usr/bin/env node

/**
 * Download proto file from joblet-proto repository
 * Reads version from proto/.proto-version or uses v1.0.7 as default
 */

import { existsSync, mkdirSync, readFileSync, writeFileSync } from 'fs';
import { exec } from 'child_process';
import { promisify } from 'util';
import { join, dirname } from 'path';
import { fileURLToPath } from 'url';

const execAsync = promisify(exec);

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);
const rootDir = join(__dirname, '..');
const protoDir = join(rootDir, 'proto');
const versionFile = join(protoDir, '.proto-version');
const protoFile = join(protoDir, 'joblet.proto');

// Default version - will be overridden by .proto-version if it exists
let PROTO_VERSION = 'v1.0.7';

// Read version from .proto-version if it exists
if (existsSync(versionFile)) {
  try {
    const content = readFileSync(versionFile, 'utf-8');
    const versionMatch = content.match(/PROTO_VERSION=(.+)/);
    if (versionMatch) {
      PROTO_VERSION = versionMatch[1].trim();
      console.log(`📋 Using proto version from .proto-version: ${PROTO_VERSION}`);
    }
  } catch (err) {
    console.warn('⚠️  Could not read .proto-version, using default:', PROTO_VERSION);
  }
} else {
  console.log(`📋 No .proto-version file, using default: ${PROTO_VERSION}`);
}

async function downloadProto() {
  try {
    // Check if proto already exists and matches version
    if (existsSync(protoFile) && existsSync(versionFile)) {
      const versionContent = readFileSync(versionFile, 'utf-8');
      if (versionContent.includes(PROTO_VERSION)) {
        console.log(`✅ Proto file already exists for version ${PROTO_VERSION}`);
        return;
      }
    }

    console.log(`📥 Downloading joblet.proto version ${PROTO_VERSION}...`);

    // Create proto directory if it doesn't exist
    if (!existsSync(protoDir)) {
      mkdirSync(protoDir, { recursive: true });
    }

    // Download proto file from specific version/tag
    const url = `https://raw.githubusercontent.com/ehsaniara/joblet-proto/${PROTO_VERSION}/proto/joblet.proto`;
    const command = `curl -fsSL "${url}" -o "${protoFile}"`;

    await execAsync(command);

    // Update version file
    const versionFileContent = `# Proto Version Tracking
# This file tracks the version of joblet-proto currently in use

PROTO_SOURCE=https://github.com/ehsaniara/joblet-proto
PROTO_VERSION=${PROTO_VERSION}
LAST_UPDATED=${new Date().toISOString().split('T')[0]}
UPDATED_BY=auto-download

# This file is auto-generated by scripts/download-proto.js
`;

    writeFileSync(versionFile, versionFileContent);

    console.log(`✅ Successfully downloaded joblet.proto ${PROTO_VERSION}`);
    console.log(`📄 Proto file: ${protoFile}`);

  } catch (error) {
    console.error('❌ Failed to download proto file:', error.message);

    // If download fails and we have an existing proto, just warn
    if (existsSync(protoFile)) {
      console.warn('⚠️  Using existing proto file (may be outdated)');
      return;
    }

    // If no proto exists, this is fatal
    console.error('💥 No proto file available. Please check your network connection and try again.');
    process.exit(1);
  }
}

// Run the download
downloadProto().catch(err => {
  console.error('Fatal error:', err);
  process.exit(1);
});
