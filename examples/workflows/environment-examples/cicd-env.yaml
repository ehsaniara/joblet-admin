version: "3.0"

# CI/CD Pipeline with Environment Variables
# Complete CI/CD pipeline using environment variables for build configuration

jobs:
  # Initialize CI/CD Pipeline
  init-pipeline:
    command: "bash"
    args: [ "-c", "echo 'Initializing CI/CD Pipeline'; echo 'Project: $PROJECT_NAME'; echo 'Branch: $GIT_BRANCH'; echo 'Commit: $GIT_COMMIT'; echo 'Build number: $BUILD_NUMBER'; mkdir -p /volumes/cicd/{source,artifacts,reports}; echo 'pipeline_id=$PIPELINE_ID' > /volumes/cicd/pipeline.env; echo 'Pipeline initialized'" ]
    environment:
      PROJECT_NAME: "my-web-app"
      GIT_BRANCH: "main"
      GIT_COMMIT: "a1b2c3d4e5f6"
      BUILD_NUMBER: "142"
      PIPELINE_ID: "build-142-main"
      BUILD_ENVIRONMENT: "ci"
    volumes: [ "cicd" ]
    resources:
      max_memory: 256

  # Checkout Source Code
  checkout-source:
    command: "bash"
    args: [ "-c", "source /volumes/cicd/pipeline.env; echo 'Checking out source code'; echo 'Repository: $GIT_REPOSITORY'; echo 'Branch: $GIT_BRANCH'; echo 'Commit: $GIT_COMMIT'; echo 'Clone depth: $CLONE_DEPTH'; echo 'Source checked out to /volumes/cicd/source/'; echo 'checkout_timestamp='$(date) >> /volumes/cicd/pipeline.env; echo 'Checkout completed'" ]
    environment:
      GIT_REPOSITORY: "https://github.com/company/my-web-app.git"
      GIT_BRANCH: "main"
      GIT_COMMIT: "a1b2c3d4e5f6"
      CLONE_DEPTH: "1"
      GIT_TOKEN: "ghp_xxxxxxxxxxxxxxxxxxxx"
    volumes: [ "cicd" ]
    requires:
      - init-pipeline: "COMPLETED"
    resources:
      max_memory: 512

  # Install Dependencies
  install-dependencies:
    command: "bash"
    args: [ "-c", "source /volumes/cicd/pipeline.env; echo 'Installing dependencies'; echo 'Package manager: $PACKAGE_MANAGER'; echo 'Node version: $NODE_VERSION'; echo 'Cache strategy: $CACHE_STRATEGY'; echo 'Registry: $NPM_REGISTRY'; echo 'Dependencies installed in /volumes/cicd/source/node_modules'; echo 'dependency_install_time='$(date) >> /volumes/cicd/pipeline.env; echo 'Dependencies installed successfully'" ]
    environment:
      PACKAGE_MANAGER: "npm"
      NODE_VERSION: "18.17.0"
      NPM_REGISTRY: "https://registry.npmjs.org/"
      CACHE_STRATEGY: "cache-dependencies"
      INSTALL_TIMEOUT: "300"
    volumes: [ "cicd" ]
    requires:
      - checkout-source: "COMPLETED"
    resources:
      max_memory: 1024
      max_cpu: 50

  # Run Unit Tests
  run-unit-tests:
    command: "bash"
    args: [ "-c", "source /volumes/cicd/pipeline.env; echo 'Running unit tests'; echo 'Test framework: $TEST_FRAMEWORK'; echo 'Coverage threshold: $COVERAGE_THRESHOLD'; echo 'Parallel workers: $TEST_WORKERS'; echo 'Tests passed: 45/45'; echo 'Coverage: 92.5%'; echo 'test_results=PASSED' >> /volumes/cicd/pipeline.env; echo 'coverage=92.5' >> /volumes/cicd/pipeline.env; echo 'Unit tests completed successfully'" ]
    environment:
      TEST_FRAMEWORK: "jest"
      COVERAGE_THRESHOLD: "80"
      TEST_WORKERS: "4"
      TEST_TIMEOUT: "300"
      GENERATE_REPORTS: "true"
    volumes: [ "cicd" ]
    requires:
      - install-dependencies: "COMPLETED"
    resources:
      max_memory: 2048
      max_cpu: 75

  # Run Integration Tests
  run-integration-tests:
    command: "bash"
    args: [ "-c", "source /volumes/cicd/pipeline.env; echo 'Running integration tests'; echo 'Database URL: $TEST_DATABASE_URL'; echo 'API base URL: $API_BASE_URL'; echo 'Test environment: $TEST_ENV'; echo 'Integration tests passed: 12/12'; echo 'API tests passed: 8/8'; echo 'integration_results=PASSED' >> /volumes/cicd/pipeline.env; echo 'Integration tests completed successfully'" ]
    environment:
      TEST_DATABASE_URL: "postgresql://test:test@testdb:5432/test_db"
      API_BASE_URL: "http://localhost:3000"
      TEST_ENV: "integration"
      HEADLESS_BROWSER: "true"
      SELENIUM_HUB: "http://selenium:4444"
    volumes: [ "cicd" ]
    requires:
      - run-unit-tests: "COMPLETED"
    resources:
      max_memory: 1024
      max_cpu: 50

  # Security Scan
  security-scan:
    command: "bash"
    args: [ "-c", "source /volumes/cicd/pipeline.env; echo 'Running security scan'; echo 'Scanner: $SECURITY_SCANNER'; echo 'Scan type: $SCAN_TYPE'; echo 'Severity threshold: $SEVERITY_THRESHOLD'; echo 'Vulnerabilities found: 0 critical, 2 medium, 5 low'; echo 'Security gate: PASSED'; echo 'security_scan=PASSED' >> /volumes/cicd/pipeline.env; echo 'Security scan completed'" ]
    environment:
      SECURITY_SCANNER: "snyk"
      SCAN_TYPE: "comprehensive"
      SEVERITY_THRESHOLD: "high"
      SNYK_TOKEN: "xxxxxxxxxxxxxxxxxxxx"
      FAIL_ON_ISSUES: "true"
    volumes: [ "cicd" ]
    requires:
      - run-integration-tests: "COMPLETED"
    resources:
      max_memory: 512

  # Build Application
  build-application:
    command: "bash"
    args: [ "-c", "source /volumes/cicd/pipeline.env; echo 'Building application'; echo 'Build type: $BUILD_TYPE'; echo 'Target environment: $TARGET_ENV'; echo 'Optimization level: $OPTIMIZATION_LEVEL'; echo 'Source maps: $GENERATE_SOURCEMAPS'; echo 'Build output: /volumes/cicd/artifacts/'; echo 'build_timestamp='$(date) >> /volumes/cicd/pipeline.env; echo 'Build completed successfully'" ]
    environment:
      BUILD_TYPE: "production"
      TARGET_ENV: "production"
      OPTIMIZATION_LEVEL: "maximum"
      GENERATE_SOURCEMAPS: "true"
      MINIFY_CODE: "true"
      BUNDLE_ANALYZER: "false"
    volumes: [ "cicd" ]
    requires:
      - security-scan: "COMPLETED"
    resources:
      max_memory: 2048
      max_cpu: 75

  # Create Application Package
  create-application-package:
    command: "bash"
    args: [ "-c", "source /volumes/cicd/pipeline.env; echo 'Creating application package'; echo 'Package type: $PACKAGE_TYPE'; echo 'Package name: $PACKAGE_NAME'; echo 'Version: $PACKAGE_VERSION'; echo 'Target platform: $TARGET_PLATFORM'; echo 'Package created: $PACKAGE_NAME-$PACKAGE_VERSION.$PACKAGE_TYPE'; echo 'package_version=$PACKAGE_VERSION' >> /volumes/cicd/pipeline.env; echo 'Application package created successfully'" ]
    environment:
      PACKAGE_TYPE: "tar.gz"
      PACKAGE_NAME: "my-web-app"
      PACKAGE_VERSION: "v1.2.3-build.142"
      TARGET_PLATFORM: "linux-amd64"
      COMPRESSION_LEVEL: "9"
    volumes: [ "cicd" ]
    requires:
      - build-application: "COMPLETED"
    resources:
      max_memory: 2048
      max_cpu: 50

  # Deploy to Staging
  deploy-staging:
    command: "bash"
    args: [ "-c", "source /volumes/cicd/pipeline.env; echo 'Deploying to staging'; echo 'Environment: $DEPLOY_ENV'; echo 'Kubernetes cluster: $K8S_CLUSTER'; echo 'Namespace: $K8S_NAMESPACE'; echo 'Replicas: $REPLICA_COUNT'; echo 'Health check URL: $HEALTH_CHECK_URL'; echo 'staging_deployment_url=$STAGING_URL' >> /volumes/cicd/pipeline.env; echo 'Deployed to staging successfully'" ]
    environment:
      DEPLOY_ENV: "staging"
      K8S_CLUSTER: "staging-cluster"
      K8S_NAMESPACE: "my-web-app-staging"
      REPLICA_COUNT: "2"
      HEALTH_CHECK_URL: "https://staging.my-web-app.com/health"
      STAGING_URL: "https://staging.my-web-app.com"
      DEPLOYMENT_TIMEOUT: "600"
    volumes: [ "cicd" ]
    requires:
      - create-application-package: "COMPLETED"
    resources:
      max_memory: 512

  # Run E2E Tests
  run-e2e-tests:
    command: "bash"
    args: [ "-c", "source /volumes/cicd/pipeline.env; echo 'Running E2E tests'; echo 'Target URL: $E2E_TARGET_URL'; echo 'Browser: $E2E_BROWSER'; echo 'Test suite: $E2E_SUITE'; echo 'Parallel sessions: $E2E_PARALLEL'; echo 'E2E tests passed: 25/25'; echo 'Screenshots saved: 15'; echo 'e2e_results=PASSED' >> /volumes/cicd/pipeline.env; echo 'E2E tests completed successfully'" ]
    environment:
      E2E_TARGET_URL: "https://staging.my-web-app.com"
      E2E_BROWSER: "chrome"
      E2E_SUITE: "full-regression"
      E2E_PARALLEL: "3"
      E2E_TIMEOUT: "900"
      SCREENSHOT_ON_FAILURE: "true"
    volumes: [ "cicd" ]
    requires:
      - deploy-staging: "COMPLETED"
    resources:
      max_memory: 2048
      max_cpu: 60

  # Generate Pipeline Report
  generate-pipeline-report:
    command: "bash"
    args: [ "-c", "source /volumes/cicd/pipeline.env; echo 'Generating pipeline report'; echo 'Pipeline ID: $PIPELINE_ID'; echo 'Total duration: $TOTAL_DURATION'; echo 'Status: SUCCESS'; echo 'All stages completed successfully'; echo 'Report saved to /volumes/cicd/reports/pipeline-report.json'; echo 'Notifications sent to: $NOTIFICATION_CHANNELS'; echo 'Pipeline report generated'" ]
    environment:
      TOTAL_DURATION: "12m 45s"
      REPORT_FORMAT: "json"
    volumes: [ "cicd" ]
    requires:
      - run-e2e-tests: "COMPLETED"
    resources:
      max_memory: 256