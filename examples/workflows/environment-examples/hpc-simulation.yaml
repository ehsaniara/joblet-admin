version: "3.0"

# HPC Simulation Pipeline with Environment Variables
# Shows how to run large-scale scientific simulations with parallel processing

jobs:
  # Initialize simulation environment
  setup-simulation:
    command: "python3"
    args: [ "setup_simulation.py" ]
    environment:
      SIMULATION_TYPE: "molecular_dynamics"
      GRID_SIZE: "1000x1000x1000"
      TIME_STEPS: "1000000"
      OUTPUT_DIR: "/volumes/simulation/output"
      CHECKPOINT_DIR: "/volumes/simulation/checkpoints"
      PRECISION: "double"
      RANDOM_SEED: "42"
    volumes: [ "simulation", "input-data" ]
    resources:
      max_memory: 2048
      max_cpu: 100

  # Domain decomposition for parallel processing
  partition-domain:
    command: "python3"
    args: [ "partition.py" ]
    environment:
      INPUT_MESH: "/volumes/input-data/mesh.h5"
      OUTPUT_DIR: "/volumes/simulation/partitions"
      NUM_PARTITIONS: "64"
      PARTITION_METHOD: "metis"
      LOAD_BALANCING: "dynamic"
      OVERLAP_SIZE: "2"
    volumes: [ "simulation", "input-data" ]
    requires:
      - setup-simulation: "COMPLETED"
    resources:
      max_memory: 4096
      max_cpu: 200

  # Parallel computation node 0-15 (showing first few, pattern continues)
  compute-node-0:
    command: "mpirun"
    args: [ "-n", "4", "simulation_solver", "--partition=0" ]
    environment:
      NODE_ID: "0"
      PARTITION_ID: "0"
      MPI_PROCESSES: "4"
      OMP_NUM_THREADS: "8"
      SOLVER_TYPE: "implicit"
      CONVERGENCE_TOL: "1e-8"
      MAX_ITERATIONS: "10000"
      OUTPUT_FREQUENCY: "100"
    volumes: [ "simulation" ]
    requires:
      - partition-domain: "COMPLETED"
    resources:
      max_memory: 32768
      max_cpu: 800

  compute-node-1:
    command: "mpirun"
    args: [ "-n", "4", "simulation_solver", "--partition=1" ]
    environment:
      NODE_ID: "1"
      PARTITION_ID: "1"
      MPI_PROCESSES: "4"
      OMP_NUM_THREADS: "8"
      SOLVER_TYPE: "implicit"
      CONVERGENCE_TOL: "1e-8"
      MAX_ITERATIONS: "10000"
      OUTPUT_FREQUENCY: "100"
    volumes: [ "simulation" ]
    requires:
      - partition-domain: "COMPLETED"
    resources:
      max_memory: 32768
      max_cpu: 800

  compute-node-2:
    command: "mpirun"
    args: [ "-n", "4", "simulation_solver", "--partition=2" ]
    environment:
      NODE_ID: "2"
      PARTITION_ID: "2"
      MPI_PROCESSES: "4"
      OMP_NUM_THREADS: "8"
      SOLVER_TYPE: "implicit"
      CONVERGENCE_TOL: "1e-8"
      MAX_ITERATIONS: "10000"
      OUTPUT_FREQUENCY: "100"
    volumes: [ "simulation" ]
    requires:
      - partition-domain: "COMPLETED"
    resources:
      max_memory: 32768
      max_cpu: 800

  compute-node-3:
    command: "mpirun"
    args: [ "-n", "4", "simulation_solver", "--partition=3" ]
    environment:
      NODE_ID: "3"
      PARTITION_ID: "3"
      MPI_PROCESSES: "4"
      OMP_NUM_THREADS: "8"
      SOLVER_TYPE: "implicit"
      CONVERGENCE_TOL: "1e-8"
      MAX_ITERATIONS: "10000"
      OUTPUT_FREQUENCY: "100"
    volumes: [ "simulation" ]
    requires:
      - partition-domain: "COMPLETED"
    resources:
      max_memory: 32768
      max_cpu: 800

  # Aggregator for combining partial results
  aggregate-results:
    command: "python3"
    args: [ "aggregate_results.py" ]
    environment:
      INPUT_DIR: "/volumes/simulation/partitions"
      OUTPUT_FILE: "/volumes/simulation/output/combined_results.h5"
      AGGREGATION_METHOD: "weighted_average"
      VALIDATE_CONSERVATION: "true"
      GENERATE_STATISTICS: "true"
    volumes: [ "simulation" ]
    requires:
      - compute-node-0: "COMPLETED"
      - compute-node-1: "COMPLETED"
      - compute-node-2: "COMPLETED"
      - compute-node-3: "COMPLETED"
    resources:
      max_memory: 8192
      max_cpu: 400

  # Post-processing and visualization
  postprocess:
    command: "python3"
    args: [ "postprocess.py" ]
    environment:
      INPUT_FILE: "/volumes/simulation/output/combined_results.h5"
      OUTPUT_DIR: "/volumes/simulation/visualizations"
      GENERATE_PLOTS: "true"
      GENERATE_ANIMATIONS: "true"
      FORMAT: "png,mp4"
      DPI: "300"
      FPS: "30"
    volumes: [ "simulation" ]
    requires:
      - aggregate-results: "COMPLETED"
    resources:
      max_memory: 4096
      max_cpu: 200

  # Performance analysis
  analyze-performance:
    command: "python3"
    args: [ "performance_analysis.py" ]
    environment:
      LOGS_DIR: "/volumes/simulation/logs"
      OUTPUT_REPORT: "/volumes/simulation/output/performance_report.html"
      METRICS: "speedup,efficiency,scalability"
      GENERATE_CHARTS: "true"
    volumes: [ "simulation" ]
    requires:
      - postprocess: "COMPLETED"
    resources:
      max_memory: 2048
      max_cpu: 100

  # Generate final simulation report
  generate-report:
    command: "python3"
    args: [ "generate_report.py" ]
    environment:
      RESULTS_DIR: "/volumes/simulation/output"
      VISUALIZATIONS_DIR: "/volumes/simulation/visualizations"
      REPORT_PATH: "/volumes/simulation/output/simulation_report.pdf"
      INCLUDE_CONVERGENCE: "true"
      INCLUDE_PERFORMANCE: "true"
      INCLUDE_VISUALIZATIONS: "true"
    volumes: [ "simulation" ]
    requires:
      - analyze-performance: "COMPLETED"
    resources:
      max_memory: 2048
      max_cpu: 100